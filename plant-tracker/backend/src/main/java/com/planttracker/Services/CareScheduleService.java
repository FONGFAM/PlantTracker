package com.planttracker.Services;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Stream;

// üëá Th√™m import cho Ph√¢n trang
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.planttracker.Models.*;
import com.planttracker.Repositories.*;

@Service
public class CareScheduleService {

     private final CareScheduleRepository scheduleRepo;
     private final PlantRepository plantRepo;
     private final PlantReportRepository reportRepo;
     private final PlantStatusRepository statusRepo;
     private final AIService aiService; // ƒê·ªïi t√™n t·ª´ AIService -> aiService

     public CareScheduleService(CareScheduleRepository scheduleRepo,
               PlantRepository plantRepo,
               PlantReportRepository reportRepo,
               PlantStatusRepository statusRepo,
               AIService aiService) { // S·ª≠a tham s·ªë constructor
          this.scheduleRepo = scheduleRepo;
          this.plantRepo = plantRepo;
          this.reportRepo = reportRepo;
          this.statusRepo = statusRepo;
          this.aiService = aiService; // S·ª≠a ·ªü ƒë√¢y
     }

     /**
      * L·∫•y T·∫§T C·∫¢ l·ªãch tr√¨nh (ƒë√£ ph√¢n trang).
      */
     public Page<CareSchedule> getAll(Pageable pageable) {
          return scheduleRepo.findAll(pageable);
     }

     /**
      * L·∫•y T·∫§T C·∫¢ l·ªãch tr√¨nh C·ª¶A USER HI·ªÜN T·∫†I (ƒë√£ ph√¢n trang v√† ch·ªâ active).
      */
     public Page<CareSchedule> getAllByUsername(String username, Pageable pageable) {
          return scheduleRepo.findByPlant_User_UsernameAndActiveTrue(username, pageable);
     }

     /**
      * L·∫•y l·ªãch tr√¨nh theo ID.
      */
     public CareSchedule getById(Long id) {
          return scheduleRepo.findById(id)
                    .orElseThrow(() -> new RuntimeException("Schedule not found"));
     }

     /**
      * L·∫•y c√°c l·ªãch tr√¨nh C√íN K√çCH HO·∫†T theo plantId (ƒë√£ ph√¢n trang).
      */
     public Page<CareSchedule> getActiveByPlantId(Long plantId, Pageable pageable) {
          return scheduleRepo.findByPlant_IdAndActiveTrue(plantId, pageable);
     }

     /**
      * T·∫°o m·ªôt quy t·∫Øc chƒÉm s√≥c m·ªõi.
      */
     @Transactional
     public CareSchedule createSchedule(Long plantId, String type, LocalDateTime nextAt, String frequency) {
          Plants plant = plantRepo.findById(plantId)
                    .orElseThrow(() -> new RuntimeException("Plant not found"));

          CareSchedule schedule = new CareSchedule();
          schedule.setPlant(plant);
          schedule.setType(type);
          schedule.setNextAt(nextAt);
          schedule.setFrequency(frequency);
          schedule.setActive(true);

          return scheduleRepo.save(schedule);
     }

     /**
      * C·∫≠p nh·∫≠t m·ªôt quy t·∫Øc chƒÉm s√≥c.
      */
     @Transactional
     public CareSchedule updateSchedule(Long id, String type, LocalDateTime nextAt, String frequency) {
          CareSchedule schedule = getById(id);
          schedule.setType(type);
          schedule.setNextAt(nextAt);
          schedule.setFrequency(frequency);
          return scheduleRepo.save(schedule);
     }

     /**
      * H·ªßy k√≠ch ho·∫°t m·ªôt quy t·∫Øc (x√≥a m·ªÅm).
      */
     @Transactional
     public CareSchedule deactivateSchedule(Long id) {
          CareSchedule schedule = getById(id);
          schedule.setActive(false);
          return scheduleRepo.save(schedule);
     }

     /**
      * X√≥a vƒ©nh vi·ªÖn m·ªôt quy t·∫Øc kh·ªèi database.
      */
     @Transactional
     public void permanentlyDeleteSchedule(Long id) {
          scheduleRepo.deleteById(id);
     }

     /**
      * ƒê√°nh d·∫•u m·ªôt quy t·∫Øc l√† "ƒë√£ ho√†n th√†nh".
      */
     @Transactional
     public CareSchedule markCompleted(Long id) {
          CareSchedule schedule = getById(id);
          LocalDateTime now = LocalDateTime.now();
          schedule.setLastPerformedAt(now);
          schedule.setNextAt(calculateNextAt(now, schedule.getFrequency())); // T√≠nh l·∫ßn k·∫ø ti·∫øp
          return scheduleRepo.save(schedule);
     }

     /**
      * ƒê√°nh d·∫•u m·ªôt quy t·∫Øc l√† "b·ªè qua".
      */
     @Transactional
     public CareSchedule markSkipped(Long id) {
          CareSchedule schedule = getById(id);
          // Ch·ªâ t√≠nh l·∫ßn k·∫ø ti·∫øp, kh√¥ng c·∫≠p nh·∫≠t lastPerformedAt
          schedule.setNextAt(calculateNextAt(schedule.getNextAt(), schedule.getFrequency()));
          return scheduleRepo.save(schedule);
     }

     /**
      * T·∫°o l·ªãch b·∫±ng AI d·ª±a tr√™n th√¥ng tin chi ti·∫øt c·ªßa c√¢y.
      */
     @Transactional
     public void generateSchedulesAI(Long plantId) throws IOException {
          // L·∫•y th√¥ng tin c√¢y, bao g·ªìm c·∫£ lo·∫°i c√¢y (PlantType)
          Plants plant = plantRepo.findById(plantId)
                    .orElseThrow(() -> new RuntimeException("Plant not found"));
          String plantTypeName = Optional.ofNullable(plant.getPlantType())
                    .map(PlantTypes::getTypeName)
                    .orElse("Kh√¥ng r√µ lo·∫°i");

          PlantReport latestReport = reportRepo.findByPlant_IdOrderByDateAsc(plantId)
                    .stream().reduce((first, second) -> second).orElse(null);
          PlantStatus latestStatus = statusRepo.findByPlants_IdOrderByUpdateAtAsc(plantId)
                    .stream().findFirst().orElse(null);
          String statusDescription = Optional.ofNullable(latestStatus)
                    .map(PlantStatus::getDescription)
                    .orElse("Kh√¥ng c√≥ m√¥ t·∫£");
          String statusGeneral = Optional.ofNullable(latestStatus)
                    .map(PlantStatus::getStatus)
                    .orElse("Kh√¥ng r√µ");

          // === PROMPT ƒê∆Ø·ª¢C T·ªêI ∆ØU H√ìA CAO ƒê·ªò ===
          String prompt = String.format(
                    """
                              H√£y ƒë√≥ng vai m·ªôt chuy√™n gia chƒÉm s√≥c c√¢y c·∫£nh. D·ª±a v√†o th√¥ng tin chi ti·∫øt d∆∞·ªõi ƒë√¢y, h√£y g·ª£i √Ω c√°c quy t·∫Øc chƒÉm s√≥c (l·ªãch tr√¨nh l·∫∑p l·∫°i) PH√ô H·ª¢P NH·∫§T cho c√¢y '%s' b·∫±ng TI·∫æNG VI·ªÜT.

                              TH√îNG TIN CHI TI·∫æT V·ªÄ C√ÇY:
                              - Lo·∫°i c√¢y: %s
                              - Tr·∫°ng th√°i chung: %s
                              - M√¥ t·∫£ tr·∫°ng th√°i g·∫ßn nh·∫•t: %s
                              - D·ªØ li·ªáu m√¥i tr∆∞·ªùng g·∫ßn nh·∫•t (n·∫øu c√≥): Nhi·ªát ƒë·ªô: %s¬∞C, ƒê·ªô ·∫©m: %s%%, Chi·ªÅu cao: %s cm.

                              Y√äU C·∫¶U QUAN TR·ªåNG KHI ƒê∆ØA RA L·ªäCH TR√åNH:
                              1. PH·∫¢I d·ª±a v√†o LO·∫†I C√ÇY v√† TR·∫†NG TH√ÅI HI·ªÜN T·∫†I ƒë·ªÉ ƒë∆∞a ra t·∫ßn su·∫•t chƒÉm s√≥c ph√π h·ª£p (VD: X∆∞∆°ng r·ªìng c·∫ßn √≠t n∆∞·ªõc h∆°n D∆∞∆°ng x·ªâ, c√¢y b·ªã v√†ng l√° c√≥ th·ªÉ c·∫ßn b√≥n ph√¢n kh√°c c√¢y kh·ªèe m·∫°nh).
                              2. Ch·ªâ t·∫≠p trung v√†o c√°c H√ÄNH ƒê·ªòNG c√≥ th·ªÉ l√™n l·ªãch ƒë·ªãnh k·ª≥.
                              3. KH√îNG g·ª£i √Ω v·ªÅ ƒëi·ªÅu ki·ªán tƒ©nh (√°nh s√°ng, ƒë·∫•t, ch·∫≠u).
                              4. ƒê·ªãnh d·∫°ng B·∫ÆT BU·ªòC: 'LO·∫†I H√ÄNH ƒê·ªòNG:T·∫ßn su·∫•t'.
                              5. C·∫¢ LO·∫†I H√ÄNH ƒê·ªòNG v√† T·∫¶N SU·∫§T ƒë·ªÅu PH·∫¢I VI·∫æT B·∫∞NG TI·∫æNG VI·ªÜT.
                              6. T·∫¶N SU·∫§T ph·∫£i th·ª±c t·∫ø, ƒëa d·∫°ng V√Ä C·ª§ TH·ªÇ theo t√¨nh tr·∫°ng c√¢y (VD: 'T∆∞·ªõi ƒë·∫´m khi ƒë·∫•t kh√¥ ho√†n to√†n', 'B√≥n ph√¢n lo√£ng 2 tu·∫ßn/l·∫ßn n·∫øu c√¢y ƒëang v√†ng l√°', 'H√†ng tu·∫ßn ki·ªÉm tra s√¢u b·ªánh').
                              7. C√°c LO·∫†I H√ÄNH ƒê·ªòNG h·ª£p l·ªá (vi·∫øt hoa, ti·∫øng Vi·ªát): T∆Ø·ªöI N∆Ø·ªöC, B√ìN PH√ÇN, C·∫ÆT T·ªàA, THAY CH·∫¨U, KI·ªÇM TRA S·ª®C KH·ªéE, PH√íNG TR·ª™ S√ÇU B·ªÜNH.

                              Ch·ªâ tr·∫£ v·ªÅ danh s√°ch c√°c quy t·∫Øc, KH√îNG gi·∫£i th√≠ch g√¨ th√™m.
                              """,
                    plant.getName(),
                    plantTypeName, // Th√™m lo·∫°i c√¢y
                    statusGeneral, // Tr·∫°ng th√°i chung
                    statusDescription, // M√¥ t·∫£ chi ti·∫øt h∆°n
                    latestReport != null ? latestReport.getTemperature() : "N/A", // D√πng N/A n·∫øu kh√¥ng c√≥
                    latestReport != null ? latestReport.getHumidity() : "N/A",
                    latestReport != null ? latestReport.getHeight() : "N/A");

          String advice = aiService.getCareAdvice(prompt); // G·ªçi AI

          // Map lo·∫°i Ti·∫øng Vi·ªát sang Ti·∫øng Anh
          Map<String, String> typeMapping = Map.of(
                    "T∆Ø·ªöI N∆Ø·ªöC", "WATER",
                    "B√ìN PH√ÇN", "FERTILIZE",
                    "C·∫ÆT T·ªàA", "PRUNE",
                    "THAY CH·∫¨U", "REPOT",
                    "KI·ªÇM TRA S·ª®C KH·ªéE", "HEALTH_CHECK",
                    "PH√íNG TR·ª™ S√ÇU B·ªÜNH", "PEST_CONTROL");

          // Logic parse v√† l∆∞u
          Stream.of(advice.split("\n"))
                    .filter(line -> line.contains(":"))
                    .forEach(line -> {
                         try {
                              String[] parts = line.split(":", 2);
                              String vietnameseType = parts[0].trim().toUpperCase();
                              String frequency = parts[1].trim();
                              String englishType = typeMapping.get(vietnameseType);

                              if (englishType != null) {
                                   CareSchedule schedule = new CareSchedule();
                                   schedule.setPlant(plant);
                                   schedule.setType(englishType);
                                   schedule.setFrequency(frequency); // L∆∞u t·∫ßn su·∫•t ti·∫øng Vi·ªát
                                   schedule.setNextAt(LocalDateTime.now().plusDays(1)); // B·∫Øt ƒë·∫ßu t·ª´ ng√†y mai
                                   schedule.setActive(true);
                                   scheduleRepo.save(schedule);
                              } else {
                                   System.err.println("B·ªè qua type kh√¥ng h·ª£p l·ªá t·ª´ AI (Ti·∫øng Vi·ªát): " + line);
                              }
                         } catch (Exception e) {
                              System.err.println("Kh√¥ng th·ªÉ parse d√≤ng AI: " + line + " | L·ªói: " + e.getMessage());
                         }
                    });
     }

     /**
      * H√†m t√≠nh ng√†y ti·∫øp theo d·ª±a tr√™n t·∫ßn su·∫•t.
      * C·∫ßn c·∫£i thi·ªán ƒë·ªÉ x·ª≠ l√Ω c√°c t·∫ßn su·∫•t ph·ª©c t·∫°p h∆°n.
      */
     private LocalDateTime calculateNextAt(LocalDateTime fromDate, String frequency) {
          if (frequency == null || frequency.isEmpty()) {
               return fromDate.plusDays(1); // M·∫∑c ƒë·ªãnh l√† ng√†y ti·∫øp theo n·∫øu kh√¥ng c√≥ t·∫ßn su·∫•t
          }
          try {
               // X·ª≠ l√Ω "X ng√†y/l·∫ßn" ho·∫∑c "X-Y ng√†y/l·∫ßn"
               if (frequency.contains("ng√†y/l·∫ßn")) {
                    String numericPart = frequency.split(" ")[0]; // L·∫•y ph·∫ßn s·ªë (VD: "7", "7-10")
                    if (numericPart.contains("-")) {
                         numericPart = numericPart.split("-")[0]; // L·∫•y s·ªë ƒë·∫ßu ti√™n n·∫øu l√† kho·∫£ng
                    }
                    int days = Integer.parseInt(numericPart.trim());
                    return fromDate.plusDays(days);
               }
               // TODO: Th√™m logic cho "tu·∫ßn/l·∫ßn", "th√°ng/l·∫ßn", "Khi ƒë·∫•t kh√¥", "ƒê·∫ßu m√πa xu√¢n",
               // v.v.
               // V√≠ d·ª• ƒë∆°n gi·∫£n cho "H√†ng tu·∫ßn"
               else if (frequency.equalsIgnoreCase("H√†ng tu·∫ßn")) {
                    return fromDate.plusWeeks(1);
               }
               // V√≠ d·ª• ƒë∆°n gi·∫£n cho "H√†ng th√°ng"
               else if (frequency.equalsIgnoreCase("H√†ng th√°ng")) {
                    return fromDate.plusMonths(1);
               }
               // C·∫ßn th√™m logic ph·ª©c t·∫°p h∆°n cho c√°c tr∆∞·ªùng h·ª£p kh√°c
               else {
                    System.err.println("T·∫ßn su·∫•t ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£: " + frequency + ". T·∫°m ƒë·∫∑t l√† 7 ng√†y.");
                    return fromDate.plusDays(7); // M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng hi·ªÉu t·∫ßn su·∫•t
               }
          } catch (NumberFormatException e) {
               System.err.println("L·ªói khi parse s·ªë ng√†y t·ª´ t·∫ßn su·∫•t: " + frequency);
               return fromDate.plusDays(7); // M·∫∑c ƒë·ªãnh n·∫øu l·ªói parse s·ªë
          } catch (Exception e) {
               System.err.println("L·ªói kh√¥ng x√°c ƒë·ªãnh khi t√≠nh nextAt cho t·∫ßn su·∫•t: " + frequency);
               return fromDate.plusDays(7); // M·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói kh√°c
          }
     }
}